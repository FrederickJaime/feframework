

// Px to Rem
// =================================
// useage:
// @include fontSize(20px);
@function calculate-rem($size) {
  $rem-size: $size / 16px;
  @return #{$rem-size}rem;
}

@mixin font-size($size) {
  font-size: calculate-rem($size);
}




// Map deep get
// =================================
// useage:
// map-deep-get($header-styles, small, h1, font-size)
// based on Headers _variables.scsvs

// @author Hugo Giraudel
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}



// Breakpoint include
// =================================
// useage:
// @include bp(medium) { @content }
@mixin bp($breakpoint) {

  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

}
// *** NEED TO UPDATE BASED ON MAPPY
// https://github.com/FrederickJaime/mappy-breakpoints


// Mixin doing a loop of object and adding property to go with value
// $map - object to loop
// $index - boolean to use index of item or 'key' as the name
// $prop - property to add to css
@mixin item-list($map, $index: false, $prop: 'none') {

  @each $item-name, $item in $map {

    @if not map-has-key($map, $item-name) {

      @warn ''#{$item-name}' is not a valid icon name';

    } @else {

      @if $prop == 'none' {
        @warn 'property option not included, please add property';
      } @else {

        @if $index == false {

          &-#{$item-name} {
            #{$prop}: $item;
          }

        } @else {

          &-#{index($map, $item-name $item)} {
            #{$prop}: $item;
          }

        }

      }

    }

  }

}


// Font Declaration 
// =================================
// useage:
// @include bp(medium) { @content }
@mixin font-print($map) {
  // loops $map provided in mixing
  @each $font-declared in $map {
    //putting group key into variable [small, medium, large]
    $breakpoint:  nth($font-declared, 1);
    //putting object into a variable in order to loop.
    $head-object: nth($font-declared, 2);
    //adding logic to render header styles in breakpoint
    @if $breakpoint != small {

      @include bp(#{$breakpoint}) {

        @each $head in $head-object {

          $tag: nth($head, 1);
          $tag-map: nth($head, 2);

          .#{$tag} {

            @each $key, $value in $tag-map {
              #{$key}: #{$value};
            }

          }
        }
      }
      // logic to render without breakpoint
    } @else {

      @each $head in $head-object {

        $tag: nth($head, 1);
        $tag-map: nth($head, 2);

        .#{$tag} {

          @each $key, $value in $tag-map {
            #{$key}: #{$value};
          }

        }
      }

    }


  }
}

// Get Font-Weight
// =================================
// requires : font-weight parameter
// optional : font-family but will default to base font if not included
// useage:
// calcualte-font-weight([font wegith name], [font family name]);
@function calculate-font-weight($weight, $font: $font-standard) {
  @return map-deep-get($fonts-weight, $font, $weight);
}

// Clearfix
@mixin clearfix {
  &::after {
    display: block;
    content: '';
    clear: both;
  }
}
